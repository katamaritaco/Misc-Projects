package game;

import effects.Effect;
import entities.characters.Character;
import entities.characters.personas.Persona;
import entities.interactables.Interactable;
import entities.particles.DroppedItem;
import entities.tiles.Tiles;
import gameAreas.Entrance;
import gameAreas.Map;
import gameAreas.NewGameArea;
import gui.*;
import items.foundations.Foundation;
import org.lwjgl.util.Point;
import org.lwjgl.util.Rectangle;
import org.newdawn.slick.*;
import org.newdawn.slick.state.BasicGameState;
import org.newdawn.slick.state.StateBasedGame;
import util.*;

import java.util.ArrayList;

/**
 *
 */
public class NewGameScreen extends BasicGameState {

	private NewEngine engine;

	private Point mouse = new Point(-1, -1);

	private Input input;
	public boolean haveToRelease = false;
	private ArrayList<Particle> particles = new ArrayList<Particle>();
	private static final Color transparentBlack = new Color(0, 0, 0, .5f);
	private double startOfTick = 0;
	protected static boolean drawDebug = false;
	protected static boolean drawTiming = false;
	protected static boolean drawPaths = false;
	//private Image lighting;
	//private Graphics overlay;
	private GuiManager gui;
	private GUIPanel guiPanel;

	private ArrayList<BuildingPanel> buildingPanels = new ArrayList<BuildingPanel>();


	public Point getMouse() {
		return mouse;
	}

	public ArrayList<BuildingPanel> getBuildingPanels() {
		return buildingPanels;
	}

	public void setEngine(NewEngine e) {
		engine = e;
	}
	public GUIPanel getGuiPanel() {
		return guiPanel;
	}

	public void setGuiPanel(GUIPanel panel) {
		this.guiPanel = panel;
	}
	public void closeGUIPanel(){
		this.guiPanel = null;
		engine.unpause();
	}
	public boolean drawingPaths(){return drawPaths;}

	public void mouseDragged(int oldx, int oldy, int newx, int newy) {
		if (gui.mouseDragged(oldx, oldy, newx, newy)) {
			mouse.setLocation((int) (newx / Demigods.getZoom()) + engine.getScreen().getX(), (int) (newy / Demigods.getZoom()) + engine.getScreen().getY());
		}
		if(guiPanel!=null){
			guiPanel.mouseDragged(oldx, oldy, newx,  newy);
		}
	}

	public void mouseMoved(int oldx, int oldy, int newx, int newy) {
		if (gui.mouseMoved(oldx, oldy, newx,  newy) ) {
			ZoomBar.mouseLeft();
			mouse.setLocation((int) (newx / Demigods.getZoom()) + engine.getScreen().getX(), (int) (newy / Demigods.getZoom()) + engine.getScreen().getY());
		}
		if(guiPanel!=null){
			guiPanel.mouseMoved(oldx, oldy, newx,  newy);
		}

	}

	public void mousePressed(int button, int x, int y) {
		if(guiPanel!=null && !guiPanel.clickInBounds(new Point(x, y))){
			closeGUIPanel();
		}
		if (gui.mousePressed(button, x, y)) {
			if(guiPanel!=null && guiPanel.clickInBounds(x,y)){
				guiPanel.mousePressed(button, x, y);
				return;
			}
			if (button == 0) {
				engine.lmbPressed = true;
			}
			if (button == 1) {
				engine.rmbPressed = true;
			}
			mouse.setLocation(
					(int) (x / Demigods.getZoom()) + engine.getScreen().getX(),
					(int) (y / Demigods.getZoom()) + engine.getScreen().getY()
			);
		}
		if(guiPanel!=null){
			guiPanel.mousePressed(button, x, y);
		}
	}

	public void mouseReleased(int button, int x, int y) {
		if (gui.mouseReleased(button, x, y)) {
			if (button == 0) {
				engine.lmbPressed = false;
				//mouseRectangle.setSize(-1, -1);
				//mouseRectangle.setLocation(-1, -1);
			}
			if (button == 1) {
				engine.rmbPressed = false;
				//mouseRectangle.setSize(-1, -1);
				//mouseRectangle.setLocation(-1, -1);
			}
			haveToRelease = false;
		}
		if(guiPanel!=null){
			guiPanel.mouseReleased(button, x, y);
		}
	}

	public void mouseWheelMoved(int change) {
		boolean guiMoved = gui.mouseWheelMoved(change);
		if (guiMoved) {
			//something non-GUI that requires the mouseWheel

		}
		if(guiPanel!=null){
			guiPanel.mouseWheelMoved(change);
		}
		else if (guiMoved){
			engine.getPlayer().changeSelectedItemNum(change);
		}
	}

	public void keyPressed(int key, char c) {
		KeyHandler.keyPressed(key, c);
	}

	public void keyReleased(int key, char c) {
		KeyHandler.keyReleased(key, c);
	}

	public void init(GameContainer gc, StateBasedGame game) throws SlickException {
		gui = new GuiManager();
		input = new Input(600);
		input.addListener(this);
		//Crafting.init(Demigods.getPlayerInventory(), engine.getActiveArea());
	}
	public GuiManager getGUI(){return gui;}

	// TODO Shortcut to render()
	public void render(GameContainer gc, StateBasedGame game, Graphics g) throws SlickException {

//		if(lighting == null){
//			lighting = new Image(1056, 600);
//			overlay = lighting.getGraphics();
//		}
		startOfTick = System.nanoTime();
		//long duration = System.nanoTime();
		//System.out.println("GameScreen.render(){");
		g.setAntiAlias(false);
		g.setLineWidth(1);

		Rectangle screenBounds = engine.getScreen();
		float screenX = screenBounds.getX(), screenY = screenBounds.getY();
		float screenW = screenBounds.getWidth(), screenH = screenBounds.getHeight();
		NewGameArea area = engine.getActiveArea();

//		/*
//		 * The renderXYZ() methods form the core of the actual game drawing. The
//		 * rest of the stuff that is still in this method can be left here
//		 * pretty static.
//		 */
//
		render002(g, screenX, screenY, screenW, screenH);
//		render003(g, screenX, screenY, screenW, screenH);

		//render003 saves like, 2 fps :/


		float z = Demigods.getZoom();

		// ///////
		// ITEMS//
		// ///////
		for (DroppedItem i : area.getDroppedItems()) {
			Images.itemSheet.getSprite(
					i.item.getImageID()[0],i.item.getImageID()[1]).draw(
					(i.getX() - screenX) * z,
					(i.getY() - i.getZ() - screenY) * z,
					16 * z,
					16 * z
			);
		}


		// /////////////////
		// Skill Targeting//
		// /////////////////
		if(engine.getPlayer().getCharacter().getSkillReadied()){
			engine.getPlayer().getCharacter().getReadiedSkill().readiedDraw(screenX, screenY, z, g);
		}
		// /////////////////////////////
		// EQUIPPED FOUNDATION OUTLINE//
		// /////////////////////////////
		try {
			if (engine.getPlayer().getEquippedItem().isFoundation()) {
				Foundation f = (Foundation)engine.getPlayer().getEquippedItem();
				int factor = 16;
				int mgx = mouse.getX() / factor * factor;
				int mgy = mouse.getY() / factor * factor;
//				if(mgx < 0)mgx -= 16;
//				if(mgy < 0)mgy -= 16;

				int potentialWidth = f.getPotentialBounds(mgx, mgy).getWidth();
				int potentialHeight = f.getPotentialBounds(mgx, mgy).getHeight();
				g.setColor(Color.black);
				g.drawRect((mgx - screenBounds.getX()) * z, (mgy - screenBounds.getY()) * z, (potentialWidth * 16) * z, (potentialHeight * 16) * z);
			}
		} catch (NullPointerException e) {}



		// ///////////////
		// SPELL EFFECTS//
		// ///////////////
		g.setColor(Color.red);
			for (Effect effect : area.getEffects()) {
				if(drawDebug){
					Rectangle hitbox = effect.getAbsBounds();
					g.fillRect((hitbox.getX()-screenX)*z, (hitbox.getY()-screenY)*z, hitbox.getWidth()*z, hitbox.getHeight()*z);
				}
				effect.draw(screenX, screenY, g, z);
			}
//
		// ///////////
		// CLICK BOX//
		// ///////////
		g.setColor(Color.black);
		int factor = (int)(16);
		int mgx = mouse.getX() / factor * factor;
		int mgy = mouse.getY() / factor * factor;
		if(mouse.getX() < 0)mgx -= 16;
		if(mouse.getY() < 0)mgy -= 16;

		g.drawRect((mgx - screenBounds.getX()) * z, (mgy - screenBounds.getY()) * z, 16 * z, 16 * z);
		//g.drawRect(mouse.getX());


		// ///////////
		// PARTICLES//
		// ///////////
		ArrayList<Particle> temp = new ArrayList<Particle>();
		for (Particle p : particles) {
			p.tick();
			if (p.isOff()) {
				temp.add(p);
			}
			p.draw(screenX, screenY, g, z);
		}
		for (Particle p : temp) {
			particles.remove(p);
		}



		// ////////////////
		// GUI COMPONENTS//
		// ////////////////

		// This will be changed.
		for (BuildingPanel panel : this.getBuildingPanels()) {
			panel.draw(screenX, screenY, g);
		}

		gui.draw(g);
		PauseMenu.draw(g);
		ZoomBar.draw(g);
		if(guiPanel != null){
			guiPanel.draw(screenX,  screenY, g);
		}

		// FPS
		util.Font.drawTriniganFgString(Integer.toString(gc.getFPS()), 1000, 570, 16, Color.white);
//		util.Font.drawTriniganFgString(engine.getPlayer().getCharacter().getLoc(), 1000, 550, 16, Color.white);
		if (drawDebug) {
			util.Font.drawTriniganFgString(engine.getPlayer().getCharacter().getLocString(), 1000, 550, 16, Color.white);
			util.Font.drawTriniganFgString(engine.getPlayer().getMapLoc().getX() + ", " + engine.getPlayer().getMapLoc().getY(), 1000, 530, 16, Color.white);
			util.Font.drawTriniganFgString(area.getPersonas().size() + " " + area.getPersonas().toString(), 0, 110, 16, Color.white);
		}



		// ////////////
		// CONDITIONS//
		// ////////////

//		for (int i = 0; i < Demigods.getPlayer().getCharacter().getConditions().size(); ++i) {
//			Condition condition = Demigods.getPlayer().getCharacter().getConditions().get(i);
//			if (condition.isVisible()) {
//				Images.skillSheet.getSprite(condition.getImageLoc().getX(), condition.getImageLoc().getY()).draw(5 + (i * 25), 470, 25, 25);
//			}
//		}



	}

	// TODO Shortcut to render002()

	public void render002(Graphics g, float sx, float sy, float sw, float sh) {

		float z = engine.getZoom();
		NewGameArea area = engine.getActiveArea();
		int x0 = (int)(sx / 16) - 5;
		int y0 = (int)(sy / 16) - 5;

		int xf = (int)((sx + sw) / 16) + 5;
		int yf = (int)((sy + sh) / 16) + 5;


		for(Persona p : engine.getActiveArea().getPersonas().getPersonas()){
			p.undraw();
		}

		g.setColor(Color.black);

		//////////////
		//FIRST LOOP//
		//////////////
		for (int c = 0; c < sh/16 + 10; ++c) {
			for (int r = 0; r < sw/16 + 10; ++r) {

				int x = (int)((x0 + r));
				int y = (int)((y0 + c));

				try {
						Tiles.simpleDrawTile((x0 + r)*16, (y0 + c)*16, sx, sy, area.getMap()[x][y], z);
//						g.setColor(Tiles.MINIMAP_COLORS[drawingMap.getMap()[x][y]]);
//						g.fillRect((r * 16 - sx) * z, (c * 16 - sy) * z, 16 * z, 16 * z);
						// Entrances
						if (area.getEntrances()[x][y] != null) {
							drawEntrance(area.getEntrances()[x][y], r, c, sx, sy, z);
						}
						Interactable interactable = area.getInteractables()[x][y];
						if (interactable != null) {
							if(!interactable.drawnAbove()){
								interactable.draw(sx, sy, z, g);
							}
						}
				} catch (ArrayIndexOutOfBoundsException e) {
				} catch (NullPointerException e){
				}
			}
		}



		if(drawDebug){
			for(Persona p : area.getPersonas().getPersonas()){
				Character pc = p.getCharacter();

				g.setColor(Color.orange);
				g.fillRect(
						(p.getCharacter().getAbsHitbox().getX() - sx)*z,
						(p.getCharacter().getAbsHitbox().getY() - sy)*z,
						p.getCharacter().getAbsHitbox().getWidth()*z,
						p.getCharacter().getAbsHitbox().getHeight()*z
				);
				g.setColor(Color.cyan);
				g.fillRect(
						(p.getCharacter().getX() - sx)*z,
						(p.getCharacter().getY() - sy)*z,
						5*z,
						5*z
				);
				p.draw(
						(-(pc.getBaseMap().getX() * Map.SIZE * 16) + sx),
						(-(pc.getBaseMap().getY() * Map.SIZE * 16) + sy),
						z,
						g);
			}
		}
		//else{
			///////////////
			//SECOND LOOP//
			///////////////
			for (int c = 0; c < sh/16 + 10; ++c) {
				for (int r = 0; r < sw/16 + 10; ++r) {

					int x = (int)((x0 + r));
					int y = (int)((y0 + c));

					try {
						// /////////////
						// CHARCACTERS//
						// /////////////
						for(Persona p : area.getPersonas().get(new Rectangle(x*16, y*16, 16, 16))){
							p.draw(sx, sy, z, g, x, y);
						}
						Tiles.drawSecondLayerSimple((x0 + r) * 16, (y0 + c) * 16, sx, sy, area.getMap()[x][y], z);
						// ///////////////
						// INTERACTABLES//
						// ///////////////
						Interactable interactable = area.getInteractables()[x][y];
						if (interactable != null) {
							if(interactable.drawnAbove()){
								interactable.draw(sx, sy, z, g);
							}
						}



						// ////////////////
						// RESOURCE TILES//
						// ////////////////
						if (area.getResources()[x][y] != null) {
							area.getResources()[x][y].draw(sx, sy, z,g);
						}



					} catch (ArrayIndexOutOfBoundsException e) {
					} catch (NullPointerException e){
					}
				}
			}
		//}

	}


	private void drawEntrance(Entrance e, int r, int c, float sx, float sy, float z){

		if (e.isFacingUp()) {
			if (e.isOn()) {
				Images.tileSheet.getSprite(1, 4).draw((r * 16 - sx) * z, (c * 16 - sy) * z, 16 * z, 16 * z);
			} else {
				Images.tileSheet.getSprite(0, 4).draw((r * 16 - sx) * z, (c * 16 - sy) * z, 16 * z, 16 * z);
			}
		} else {
			if (e.isOn()) {
				Images.tileSheet.getSprite(1, 4).draw((r * 16 - sx + 16) * z, (c * 16 - sy + 16) * z, (r * 16 - sx) * z, (c * 16 - sy) * z, 16, 16, 0, 0);
			} else {
				Images.tileSheet.getSprite(0, 4).draw((r * 16 - sx + 16) * z, (c * 16 - sy + 16) * z, (r * 16 - sx) * z, (c * 16 - sy) * z, 16, 16, 0, 0);
			}
		}
		e.tick();
	}


	public void update(GameContainer gc, StateBasedGame game, int delta) throws SlickException {
		startOfTick = System.nanoTime();
		engine.update();
		if(guiPanel!=null)guiPanel.tick(engine);

		startOfTick = System.nanoTime() - startOfTick;
		startOfTick = startOfTick/1000000000;
		if(startOfTick < 0.016){
		}
		//System.out.println(startOfTick);

	}

	public int getID() {
		return 1;
	}

	public ArrayList<Particle> getParticles() {
		return particles;
	}
}